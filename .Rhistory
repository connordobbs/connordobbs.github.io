final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, "ABV Distribution"))
}
}
})
output$ibuPlot <- renderPlot({
if (state() == 'All') {
if (x() == 2) {
final %>%
ggplot(aes(x = IBU)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States IBU Distribution')
}
else {
final %>%
ggplot(aes(x = IBU)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States IBU Distribution')
}
}
else {
if (x() == 2) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = IBU)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, " IBUDistribution"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = IBU)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata + ggtitle(paste(input$state, "IBU Distribution"))
}
}
})
output$scatterplot <- renderPlot({
if (state() == 'All') {
if (y() == TRUE) {
final %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + geom_smooth(method = 'lm') + ggtitle('All States ABV vs IBU')
}
else {
final %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + ggtitle('All States ABV vs IBU')
}
}
else {
if (y() == TRUE) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + geom_smooth(method = 'lm') + ggtitle(paste(input$state, "ABV vs IBU"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + ggtitle(paste(input$state, "ABV vs IBU"))
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
---
title: "Ole Faithful Full"
author: "Bivin"
date: "4/4/2019"
output: html_document
runtime: shiny
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r echo = FALSE}
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Ole Faithful App!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
#Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
#Copy the line below to make a select box
selectInput("select", label = h3("Eruption or Waiting Time"),
choices = list("Eruptions" = "eruptions", "Waiting" = "waiting"),
selected = 1),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
if(input$select == "waiting")
{
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
}
if(input$select == "eruptions")
{
x    <- faithful$eruptions
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Eruption time (in mins)",
main = "Histogram of eruption times")
}
})
}
shinyApp(ui, server)
```
setwd("~/git_repositories/MSDS/DoingDataScience/Unit 12/Old Faithful")
rsconnect::deployApp()
---
title: "Beer Data"
author: "Connor Dobbs"
date: "11/7/2021"
output: html_document
runtime: shiny
---
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(shiny)
# Read Breweries csv
breweries = read.csv('Data/Breweries.csv')
# Change Brew_ID to brewery_id in Breweries
colnames(breweries)[1] <- "Brewery_id"
# Read Beers csv
beers = read.csv('Data/Beers.csv')
# Merge Beers and Breweries Data
final = left_join(beers, breweries, by = "Brewery_id")
# Formatting after merge
final$State = trimws(final$State) # Remove Spaces from State
final$State = as.factor(final$State) # Make State factor
final = rename(final, Beer_Name = Name.x) # Rename Name columns
final = rename(final, Brewery_Name = Name.y)
# Read Breweries csv
#breweries = read.csv('Data/breweries.csv', header = TRUE)
ui <- fluidPage(
# App title ----
titlePanel("Beer Data Exploration"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
#Select State
selectInput(inputId = "state",
label = "Select State:",
choices = c('All', state.abb)),
#Select Chart Type
radioButtons(inputId = "charttype",
label = "Chart Type:",
choices = list("Boxplot" = 1, "Histogram" = 2),
selected = 2),
#Display Reg Line
checkboxInput("linregline",
label = "Add Regression Line",
value = TRUE)
),# end sidebarPanel
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "abvPlot"),
plotOutput('ibuPlot'),
plotOutput('scatterplot')
)
)
)
server <- function(input, output) {
x <- reactive({input$charttype})
y <- reactive({input$linregline})
state <- reactive({input$state})
# if state = all, plots without state filter, else adds state filter...could convert to function to make cleaner but lazy right now
output$abvPlot <- renderPlot({
if (state() == 'All') {
if (x() == 2) {
final %>%
ggplot(aes(x = ABV)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States ABV Distribution')
}
else {
final %>%
ggplot(aes(x = ABV)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States ABV Distribution')
}
}
else {
if (x() == 2) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, "ABV Distribution"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, "ABV Distribution"))
}
}
})
output$ibuPlot <- renderPlot({
if (state() == 'All') {
if (x() == 2) {
final %>%
ggplot(aes(x = IBU)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States IBU Distribution')
}
else {
final %>%
ggplot(aes(x = IBU)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States IBU Distribution')
}
}
else {
if (x() == 2) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = IBU)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, " IBUDistribution"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = IBU)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata + ggtitle(paste(input$state, "IBU Distribution"))
}
}
})
output$scatterplot <- renderPlot({
if (state() == 'All') {
if (y() == TRUE) {
final %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + geom_smooth(method = 'lm') + ggtitle('All States ABV vs IBU')
}
else {
final %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + ggtitle('All States ABV vs IBU')
}
}
else {
if (y() == TRUE) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + geom_smooth(method = 'lm') + ggtitle(paste(input$state, "ABV vs IBU"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + ggtitle(paste(input$state, "ABV vs IBU"))
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd("~/git_repositories/MSDS/DoingDataScience/Unit 12/BeerApp")
---
title: "Beer Data"
author: "Connor Dobbs"
date: "11/7/2021"
output: html_document
runtime: shiny
---
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(shiny)
# Read Breweries csv
breweries = read.csv('Data/Breweries.csv')
# Change Brew_ID to brewery_id in Breweries
colnames(breweries)[1] <- "Brewery_id"
# Read Beers csv
beers = read.csv('Data/Beers.csv')
# Merge Beers and Breweries Data
final = left_join(beers, breweries, by = "Brewery_id")
# Formatting after merge
final$State = trimws(final$State) # Remove Spaces from State
final$State = as.factor(final$State) # Make State factor
final = rename(final, Beer_Name = Name.x) # Rename Name columns
final = rename(final, Brewery_Name = Name.y)
# Read Breweries csv
#breweries = read.csv('Data/breweries.csv', header = TRUE)
ui <- fluidPage(
# App title ----
titlePanel("Beer Data Exploration"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
#Select State
selectInput(inputId = "state",
label = "Select State:",
choices = c('All', state.abb)),
#Select Chart Type
radioButtons(inputId = "charttype",
label = "Chart Type:",
choices = list("Boxplot" = 1, "Histogram" = 2),
selected = 2),
#Display Reg Line
checkboxInput("linregline",
label = "Add Regression Line",
value = TRUE)
),# end sidebarPanel
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "abvPlot"),
plotOutput('ibuPlot'),
plotOutput('scatterplot')
)
)
)
server <- function(input, output) {
x <- reactive({input$charttype})
y <- reactive({input$linregline})
state <- reactive({input$state})
# if state = all, plots without state filter, else adds state filter...could convert to function to make cleaner but lazy right now
output$abvPlot <- renderPlot({
if (state() == 'All') {
if (x() == 2) {
final %>%
ggplot(aes(x = ABV)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States ABV Distribution')
}
else {
final %>%
ggplot(aes(x = ABV)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States ABV Distribution')
}
}
else {
if (x() == 2) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, "ABV Distribution"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, "ABV Distribution"))
}
}
})
output$ibuPlot <- renderPlot({
if (state() == 'All') {
if (x() == 2) {
final %>%
ggplot(aes(x = IBU)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States IBU Distribution')
}
else {
final %>%
ggplot(aes(x = IBU)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States IBU Distribution')
}
}
else {
if (x() == 2) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = IBU)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, " IBUDistribution"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = IBU)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata + ggtitle(paste(input$state, "IBU Distribution"))
}
}
})
output$scatterplot <- renderPlot({
if (state() == 'All') {
if (y() == TRUE) {
final %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + geom_smooth(method = 'lm') + ggtitle('All States ABV vs IBU')
}
else {
final %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + ggtitle('All States ABV vs IBU')
}
}
else {
if (y() == TRUE) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + geom_smooth(method = 'lm') + ggtitle(paste(input$state, "ABV vs IBU"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + ggtitle(paste(input$state, "ABV vs IBU"))
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(shiny)
# Read Breweries csv
breweries = read.csv('Data/Breweries.csv')
# Change Brew_ID to brewery_id in Breweries
colnames(breweries)[1] <- "Brewery_id"
# Read Beers csv
beers = read.csv('Data/Beers.csv')
# Merge Beers and Breweries Data
final = left_join(beers, breweries, by = "Brewery_id")
# Formatting after merge
final$State = trimws(final$State) # Remove Spaces from State
final$State = as.factor(final$State) # Make State factor
final = rename(final, Beer_Name = Name.x) # Rename Name columns
final = rename(final, Brewery_Name = Name.y)
# Read Breweries csv
#breweries = read.csv('Data/breweries.csv', header = TRUE)
ui <- fluidPage(
# App title ----
titlePanel("Beer Data Exploration"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
#Select State
selectInput(inputId = "state",
label = "Select State:",
choices = c('All', state.abb)),
#Select Chart Type
radioButtons(inputId = "charttype",
label = "Chart Type:",
choices = list("Boxplot" = 1, "Histogram" = 2),
selected = 2),
#Display Reg Line
checkboxInput("linregline",
label = "Add Regression Line",
value = TRUE)
),# end sidebarPanel
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "abvPlot"),
plotOutput('ibuPlot'),
plotOutput('scatterplot')
)
)
)
server <- function(input, output) {
x <- reactive({input$charttype})
y <- reactive({input$linregline})
state <- reactive({input$state})
# if state = all, plots without state filter, else adds state filter...could convert to function to make cleaner but lazy right now
output$abvPlot <- renderPlot({
if (state() == 'All') {
if (x() == 2) {
final %>%
ggplot(aes(x = ABV)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States ABV Distribution')
}
else {
final %>%
ggplot(aes(x = ABV)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States ABV Distribution')
}
}
else {
if (x() == 2) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, "ABV Distribution"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, "ABV Distribution"))
}
}
})
output$ibuPlot <- renderPlot({
if (state() == 'All') {
if (x() == 2) {
final %>%
ggplot(aes(x = IBU)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States IBU Distribution')
}
else {
final %>%
ggplot(aes(x = IBU)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle('All States IBU Distribution')
}
}
else {
if (x() == 2) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = IBU)) + geom_histogram(fill = 'steelblue', color = 'black') + theme_stata() + ggtitle(paste(input$state, " IBUDistribution"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = IBU)) + geom_boxplot(fill = 'steelblue', color = 'black') + theme_stata + ggtitle(paste(input$state, "IBU Distribution"))
}
}
})
output$scatterplot <- renderPlot({
if (state() == 'All') {
if (y() == TRUE) {
final %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + geom_smooth(method = 'lm') + ggtitle('All States ABV vs IBU')
}
else {
final %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + ggtitle('All States ABV vs IBU')
}
}
else {
if (y() == TRUE) {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + geom_smooth(method = 'lm') + ggtitle(paste(input$state, "ABV vs IBU"))
}
else {
final %>% filter(State == input$state) %>%
ggplot(aes(x = ABV, y = IBU, color = IBU)) + geom_point() + theme_stata() + ggtitle(paste(input$state, "ABV vs IBU"))
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
setwd("~/git_repositories/connordobbs.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
